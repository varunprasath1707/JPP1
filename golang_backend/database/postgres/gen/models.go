// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0

package gen

import (
	"database/sql/driver"
	"fmt"
	"time"

	database "ZenitusJPP/database"
	"github.com/jackc/pgtype"
)

type CommentStatus string

const (
	CommentStatusLiked    CommentStatus = "Liked"
	CommentStatusDisliked CommentStatus = "Disliked"
	CommentStatusReport   CommentStatus = "Report"
)

func (e *CommentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CommentStatus(s)
	case string:
		*e = CommentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for CommentStatus: %T", src)
	}
	return nil
}

type NullCommentStatus struct {
	CommentStatus CommentStatus `json:"commentStatus"`
	Valid         bool          `json:"valid"` // Valid is true if CommentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCommentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.CommentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CommentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCommentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CommentStatus), nil
}

type SelectChoice string

const (
	SelectChoiceTokyo       SelectChoice = "tokyo"
	SelectChoiceKyoto       SelectChoice = "kyoto"
	SelectChoiceOther       SelectChoice = "other"
	SelectChoiceChoiceOne   SelectChoice = "choice_one"
	SelectChoiceChoiceTwo   SelectChoice = "choice_two"
	SelectChoiceChoiceThree SelectChoice = "choice_three"
	SelectChoiceChoiceFour  SelectChoice = "choice_four"
	SelectChoiceChoiceFive  SelectChoice = "choice_five"
	SelectChoiceChoiceSix   SelectChoice = "choice_six"
)

func (e *SelectChoice) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SelectChoice(s)
	case string:
		*e = SelectChoice(s)
	default:
		return fmt.Errorf("unsupported scan type for SelectChoice: %T", src)
	}
	return nil
}

type NullSelectChoice struct {
	SelectChoice SelectChoice `json:"selectChoice"`
	Valid        bool         `json:"valid"` // Valid is true if SelectChoice is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSelectChoice) Scan(value interface{}) error {
	if value == nil {
		ns.SelectChoice, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SelectChoice.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSelectChoice) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SelectChoice), nil
}

type SelectGender string

const (
	SelectGenderMale   SelectGender = "male"
	SelectGenderFemale SelectGender = "female"
	SelectGenderOther  SelectGender = "other"
)

func (e *SelectGender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SelectGender(s)
	case string:
		*e = SelectGender(s)
	default:
		return fmt.Errorf("unsupported scan type for SelectGender: %T", src)
	}
	return nil
}

type NullSelectGender struct {
	SelectGender SelectGender `json:"selectGender"`
	Valid        bool         `json:"valid"` // Valid is true if SelectGender is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSelectGender) Scan(value interface{}) error {
	if value == nil {
		ns.SelectGender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SelectGender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSelectGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SelectGender), nil
}

type SelectLocation string

const (
	SelectLocationTokyo SelectLocation = "tokyo"
	SelectLocationKyoto SelectLocation = "kyoto"
	SelectLocationOther SelectLocation = "other"
)

func (e *SelectLocation) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SelectLocation(s)
	case string:
		*e = SelectLocation(s)
	default:
		return fmt.Errorf("unsupported scan type for SelectLocation: %T", src)
	}
	return nil
}

type NullSelectLocation struct {
	SelectLocation SelectLocation `json:"selectLocation"`
	Valid          bool           `json:"valid"` // Valid is true if SelectLocation is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSelectLocation) Scan(value interface{}) error {
	if value == nil {
		ns.SelectLocation, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SelectLocation.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSelectLocation) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SelectLocation), nil
}

type SelectLocations string

const (
	SelectLocationsTokyo SelectLocations = "tokyo"
	SelectLocationsKyoto SelectLocations = "kyoto"
	SelectLocationsOther SelectLocations = "other"
)

func (e *SelectLocations) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SelectLocations(s)
	case string:
		*e = SelectLocations(s)
	default:
		return fmt.Errorf("unsupported scan type for SelectLocations: %T", src)
	}
	return nil
}

type NullSelectLocations struct {
	SelectLocations SelectLocations `json:"selectLocations"`
	Valid           bool            `json:"valid"` // Valid is true if SelectLocations is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSelectLocations) Scan(value interface{}) error {
	if value == nil {
		ns.SelectLocations, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SelectLocations.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSelectLocations) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SelectLocations), nil
}

type AgendaAcceptence struct {
	AgendaAcceptenceID int64     `json:"agendaAcceptenceId"`
	UserID             int64     `json:"userId"`
	AgendaMasterID     int64     `json:"agendaMasterId"`
	CreatedAt          time.Time `json:"createdAt"`
	UpdatedAt          time.Time `json:"updatedAt"`
}

type AgendaChoice struct {
	AgendaChoiceID int64     `json:"agendaChoiceId"`
	AgendaMasterID int64     `json:"agendaMasterId"`
	CreatedAt      time.Time `json:"createdAt"`
	UpdatedAt      time.Time `json:"updatedAt"`
	ChoiceText     string    `json:"choiceText"`
	DisplayOrder   int32     `json:"displayOrder"`
	ChoiceID       string    `json:"choiceId"`
}

type AgendaComment struct {
	AgendaCommentID    int64     `json:"agendaCommentId"`
	UserID             int64     `json:"userId"`
	AgendaMasterID     int64     `json:"agendaMasterId"`
	CommentText        string    `json:"commentText"`
	CreatedAt          time.Time `json:"createdAt"`
	UpdatedAt          time.Time `json:"updatedAt"`
	RefAgendaCommentID int64     `json:"refAgendaCommentId"`
}

type AgendaCommentReportlikedislike struct {
	AgendaCommentRll int64         `json:"agendaCommentRll"`
	UserID           int64         `json:"userId"`
	AgendaCommentID  int64         `json:"agendaCommentId"`
	CommentResponse  CommentStatus `json:"commentResponse"`
}

type AgendaMaster struct {
	AgendaMasterID    int64           `json:"agendaMasterId"`
	UserID            int64           `json:"userId"`
	TopicName         string          `json:"topicName"`
	LocationLevel     SelectLocations `json:"locationLevel"`
	DiscussionDetails string          `json:"discussionDetails"`
	IsApproved        bool            `json:"isApproved"`
	IsDeleted         bool            `json:"isDeleted"`
	CreatedAt         time.Time       `json:"createdAt"`
	UpdatedAt         time.Time       `json:"updatedAt"`
}

type AgendaVote struct {
	AgendaVoteID   int64     `json:"agendaVoteId"`
	UserID         int64     `json:"userId"`
	AgendaMasterID int64     `json:"agendaMasterId"`
	CreatedAt      time.Time `json:"createdAt"`
	UpdatedAt      time.Time `json:"updatedAt"`
	AgendaChoiceID int64     `json:"agendaChoiceId"`
}

type DynamicDatum struct {
	DynamicDataID int64  `json:"dynamicDataId"`
	Keys          string `json:"keys"`
	Values        string `json:"values"`
}

type Inquiry struct {
	InquiryID      int64     `json:"inquiryId"`
	UserName       string    `json:"userName"`
	EmailID        string    `json:"emailId"`
	MessageContent string    `json:"messageContent"`
	CreatedAt      time.Time `json:"createdAt"`
	UpdatedAt      time.Time `json:"updatedAt"`
}

type NoticeMaster struct {
	Srno          int64     `json:"srno"`
	NoticeText    string    `json:"noticeText"`
	CreatedOn     time.Time `json:"createdOn"`
	LastUpdatedOn time.Time `json:"lastUpdatedOn"`
}

type Notification struct {
	NotificationID   int64     `json:"notificationId"`
	UserID           int64     `json:"userId"`
	NotificationText string    `json:"notificationText"`
	CreatedAt        time.Time `json:"createdAt"`
	IsDeleted        bool      `json:"isDeleted"`
}

type PetitionAcceptence struct {
	PetitionAcceptenceID int64     `json:"petitionAcceptenceId"`
	PetitionMasterID     int64     `json:"petitionMasterId"`
	UserID               int64     `json:"userId"`
	CreatedAt            time.Time `json:"createdAt"`
	UpdatedAt            time.Time `json:"updatedAt"`
}

type PetitionMail struct {
	PetitionMailID   int64     `json:"petitionMailId"`
	PetitionMasterID int64     `json:"petitionMasterId"`
	UserID           int64     `json:"userId"`
	EmailID          string    `json:"emailId"`
	CreatedOn        time.Time `json:"createdOn"`
}

type PetitionMaster struct {
	PetitionMasterID    int64          `json:"petitionMasterId"`
	UserID              int64          `json:"userId"`
	Title               string         `json:"title"`
	Locationlevel       SelectLocation `json:"locationlevel"`
	UserTarget          string         `json:"userTarget"`
	PetitionContent     string         `json:"petitionContent"`
	SubmissionAddress   string         `json:"submissionAddress"`
	Deadline            time.Time      `json:"deadline"`
	Recruitmentcomments string         `json:"recruitmentcomments"`
	IsDeleted           bool           `json:"isDeleted"`
	CreatedAt           time.Time      `json:"createdAt"`
	UpdatedAt           time.Time      `json:"updatedAt"`
}

type Rtn struct {
	Count database.NullInt64 `json:"count"`
}

type SmsStatus struct {
	SmsID        int64  `json:"smsId"`
	Email        string `json:"email"`
	Body         string `json:"body"`
	EmailSubject string `json:"emailSubject"`
	Status       bool   `json:"status"`
}

type UniqueVisitor struct {
	UvID      int64     `json:"uvId"`
	VistorIp  string    `json:"vistorIp"`
	CreatedAt time.Time `json:"createdAt"`
}

type User struct {
	UserID             int64             `json:"userId"`
	FirstName          []byte            `json:"firstName"`
	LastName           []byte            `json:"lastName"`
	UserAddress        []byte            `json:"userAddress"`
	PhFixed            []byte            `json:"phFixed"`
	PhMobile           []byte            `json:"phMobile"`
	HandleName         []byte            `json:"handleName"`
	DisplayName        string            `json:"displayName"`
	EmailID            string            `json:"emailId"`
	Token              string            `json:"token"`
	Gender             SelectGender      `json:"gender"`
	Dob                time.Time         `json:"dob"`
	JppPassword        string            `json:"jppPassword"`
	Otp                int32             `json:"otp"`
	IsAdmin            bool              `json:"isAdmin"`
	MobileVerification bool              `json:"mobileVerification"`
	IsDeleted          bool              `json:"isDeleted"`
	CreatedOn          time.Time         `json:"createdOn"`
	LastUpdatedOn      time.Time         `json:"lastUpdatedOn"`
	EmailVerification  bool              `json:"emailVerification"`
	OtpEmail           int32             `json:"otpEmail"`
	PaymentToken       string            `json:"paymentToken"`
	IsPaid             bool              `json:"isPaid"`
	PaidDate           database.NullTime `json:"paidDate"`
	LoginDatetime      database.NullTime `json:"loginDatetime"`
}

type UserDonationTransaction struct {
	UdtID             int64          `json:"udtId"`
	UserID            int64          `json:"userId"`
	TransactionUrl    string         `json:"transactionUrl"`
	TransactionStatus bool           `json:"transactionStatus"`
	TransactionToken  string         `json:"transactionToken"`
	DateTime          time.Time      `json:"dateTime"`
	UserName          string         `json:"userName"`
	UserEmail         string         `json:"userEmail"`
	UserAmount        pgtype.Numeric `json:"userAmount"`
}

type UserPaymentTransaction struct {
	UptID             int64     `json:"uptId"`
	UserID            int64     `json:"userId"`
	DateTime          time.Time `json:"dateTime"`
	TransactionUrl    string    `json:"transactionUrl"`
	TransactionStatus bool      `json:"transactionStatus"`
	TransactionToken  string    `json:"transactionToken"`
}

type UserSm struct {
	UsID          int64     `json:"usId"`
	Cnt           int32     `json:"cnt"`
	UserID        string    `json:"userId"`
	ProcessedTime time.Time `json:"processedTime"`
}

type UsersBackup struct {
	UserID             int64             `json:"userId"`
	FirstName          string            `json:"firstName"`
	LastName           string            `json:"lastName"`
	HandleName         string            `json:"handleName"`
	DisplayName        string            `json:"displayName"`
	EmailID            string            `json:"emailId"`
	Token              string            `json:"token"`
	Gender             SelectGender      `json:"gender"`
	Dob                time.Time         `json:"dob"`
	UserAddress        string            `json:"userAddress"`
	PhFixed            int64             `json:"phFixed"`
	PhMobile           int64             `json:"phMobile"`
	JppPassword        string            `json:"jppPassword"`
	Otp                int32             `json:"otp"`
	IsAdmin            bool              `json:"isAdmin"`
	MobileVerification bool              `json:"mobileVerification"`
	IsDeleted          bool              `json:"isDeleted"`
	CreatedOn          time.Time         `json:"createdOn"`
	LastUpdatedOn      time.Time         `json:"lastUpdatedOn"`
	EmailVerification  bool              `json:"emailVerification"`
	OtpEmail           int32             `json:"otpEmail"`
	PaymentToken       string            `json:"paymentToken"`
	IsPaid             bool              `json:"isPaid"`
	PaidDate           database.NullTime `json:"paidDate"`
	LoginDatetime      database.NullTime `json:"loginDatetime"`
}
